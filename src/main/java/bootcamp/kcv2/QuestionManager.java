package bootcamp.kcv2;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;

import org.apache.log4j.Logger;

import bootcamp.kcv2.util.DBAdapter;
import bootcamp.kcv2.util.DBAdapter.QuestionTableAdapter;
import bootcamp.kcv2.util.DBAdapter.ResultTableAdapter;;

/**
 * This class helps to manage Questions.
 */
public class QuestionManager {

	private boolean isExamStarted = false;
	public static final Logger log = Logger.getLogger(QuestionManager.class);
	private static QuestionManager qmSingleton = new QuestionManager();
	private ArrayList<StudentAnswerSheet> answers = new ArrayList<>();
	private String currentQuestionBundle;
	private int examDuration = 20; // Default value
	private Timer timer;
	private String examEnds;

	/**
	 * This method starts exam timer.
	 * @param examStarted false if exam isn't started, true if exam is started
	 */
	public void setExamStarted(boolean examStarted) {
		isExamStarted = examStarted;
		if (!examStarted) {
			timer.cancel();
		}
		if (examStarted) {
			examTimer();
		}
	}

	public String getExamEnds() {
		return examEnds;
	}
	
	public void setExamEnds(String examEnds) {
		this.examEnds = examEnds;
	}
	
	/**
	 * Returns true if exam session has been started by administrator
	 *
	 */
	public boolean isExamStarted() {
		return isExamStarted;
	}

	/**
	 * This method inputs current question bundle from database.
	 * @return current question bundle
	 */
	public String getCurrentQuestionBundle() {
		return currentQuestionBundle;
	}
	
    /**
     * @param set with current theme for exam.
     */
	public void setCurrentQuestionBundle(String set) {
		this.currentQuestionBundle = set;
	}

	private QuestionManager() {
	}

    /**
     * @return QuestionManager object
     */
	public static QuestionManager getInstance() {
		return qmSingleton;
	}

    /**
     * @return times for test 
     */
	public int getExamDuration() {
		return examDuration;
	}

	/**
     * @param examDuration time in which students are allowed to complete test.
     */
	public void setExamDuration(int examDuration) {
		this.examDuration = examDuration;
	}

	/**
	 * This method submits results that user made and then parameters are redirected in {@link #resultsCheck resultsCheck}.
	 * @param userCode unique code that was generated by Linux command task and user has registered it in database 
	 * @param answers Answers list that was made by student
	 * @param alQuestions contains information about correct answers for question
	 * @return {@link #resultsCheck resultsCheck}
	 */
	public String submitResults(String userCode, ArrayList<String> answers, ArrayList<Question> alQuestions) {
		
		if(!isExamStarted()){
			return "You are late. Exam ended at " + examEnds;
		}
		answers.remove(0);
		log.info("QuestionManager: Submitted results:\n\t" + "User=" + userCode + " Answers=" + answers);
		return resultsCheck(userCode, answers, alQuestions);
	}

	/**
	 * This method generates a list of Questions to be displayed by ServerController (parsed
	 * and later HTML is made).
	 * @param userCode unique code that was generated by Linux command task and user has registered it in database
	 * @return {@link #pullQuestionBundle pullQuestionBundle} or null if user try to connect second time
	 */
	public ArrayList<Question> getQuestionBundle(String userCode) {
		for (StudentAnswerSheet studentAnswerSheet : answers) {
			if (studentAnswerSheet.getStudentCode().equals(userCode)) {
				log.info("User has already participated.");
				return null;
			}
		}
		StudentAnswerSheet as = new StudentAnswerSheet();
		as.setStudentCode(userCode);
		as.setQuestionBundleName(qmSingleton.currentQuestionBundle);
		answers.add(as);

		return pullQuestionBundle(qmSingleton.currentQuestionBundle);
	}

	/**
	 * This method sets timer for exam.
	 * @return remaining time until the end of the exam
	 */
	public static void examTimer() {
		Calendar cal = Calendar.getInstance();
		SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
		cal.add(Calendar.MINUTE, qmSingleton.examDuration);
		Date time = cal.getTime();
		qmSingleton.timer = new Timer();
		qmSingleton.timer.schedule(qmSingleton.new RemindTask(), time);
		qmSingleton.setExamEnds("Exam will ends at: " + sdf.format(cal.getTime()));
	}

    /**
     *This class is called when the time for the exam is over.
     *@see TimerTask
     */
	class RemindTask extends TimerTask {
		public void run() {
			isExamStarted = false;
			log.info("Time's up!");
			qmSingleton.timer.cancel(); // Terminate the timer thread
		}
	}

	/**
	 * 
	 * @param currentQuestionBundle -question theme for session
	 * @return {@link bootcamp.kcv2.util.DBAdapter.QuestionTableAdapter#pullQuestionBundle pullQuestionBundle}
	 */
	public ArrayList<Question> pullQuestionBundle(String currentQuestionBundle) {
		return QuestionTableAdapter.pullQuestionBundle(currentQuestionBundle);
	}

    /**
     * 
     * @return {@link bootcamp.kcv2.util.DBAdapter.QuestionTableAdapter#pullBundleNames pullBundleNames}
     */
	public ArrayList<String> pullBundleNames() {
		return QuestionTableAdapter.pullBundleNames();
	}


	/**
	 * 
	 * @param question object with information about Questions.
	 * @return {@link bootcamp.kcv2.util.DBAdapter.QuestionTableAdapter#insertQuestion insertQuestion}
	 */
	public boolean insertQuestion(Question question) {
		return QuestionTableAdapter.insertQuestion(question);
	}

    /**
     * This method check student result for test.
     * @param userCode unique code that was generated by Linux command task and user has registered it in database 
     * @param answers student answer
     * @param alQuestions contains information about correct answers for question
     * @return student result for test session(correct and incorrect questions count)
     */
	public String resultsCheck(String userCode, ArrayList<String> answers, ArrayList<Question> alQuestions) {

		ArrayList<Integer> correctAnswers = new ArrayList<>();
		int totalQuestions = 0;
		int correctAnswersCount = 0;
		String currentAnswer = "";
		String correctAnswer = "";

		if (answers.size() != alQuestions.size()) {
			log.info("Something went wrong Answers array size doesent match Question array size");
		}
		for (int i = 0; i < answers.size(); i++) {
			correctAnswer = Question.answersGrouping(alQuestions.get(i).getCorrectAnswers());
			totalQuestions++;
			if (answers.get(i).replaceAll(".*?(.?.?.?)?$", "$1").contains(Question.SEPARATOR)) {
				currentAnswer = answers.get(i).substring(0, answers.get(i).length() - 3);
			} else {
				currentAnswer = answers.get(i);
			}
			if (alQuestions.get(i).getQuestionType().equals(QuestionTypes.SEQUENCE)) {
				String sequenceAnswer = Question.sequenceAnswersFormatter(currentAnswer);
				String sequenceCorrectAnswer = Question.sequenceAnswersFormatter(correctAnswer);
				if (sequenceAnswer.equals(sequenceCorrectAnswer)) {
					correctAnswers.add(1); // Correct - True
					correctAnswersCount++;
				} else {
					correctAnswers.add(0); // Incorrect - False
				}
				continue;
			}
			if (currentAnswer.equals(correctAnswer)) {
				correctAnswers.add(1); // Correct - True
				correctAnswersCount++;
			} else {
				correctAnswers.add(0); // Incorrect - False
			}
		}
		Result result = new Result(userCode, currentQuestionBundle, answers, correctAnswers);
		ResultTableAdapter.insertResult(result);

		int percantageResult = 0;
		if (totalQuestions > 0) {
			percantageResult = (int) (((float) correctAnswersCount / totalQuestions * 100));
		} else {
			percantageResult = 0;
		}
		StringBuilder totalResult = new StringBuilder();
		totalResult.append(correctAnswersCount + "/" + totalQuestions);
		totalResult.append(" " + String.valueOf(percantageResult + "%, "));
		totalResult.append("Wrong answers on questions: " + studentResults(correctAnswers) + ".");
		return totalResult.toString();
	}

    /**
     * This method show incorrect answers.
     * @param correctAnswers ArrayList with  answers
     * @return incorrect answers which student submitted during exam
     */
	public String studentResults(ArrayList<Integer> correctAnswers) {
		ArrayList<String> incorrectQuestions = new ArrayList<>();
		for (int i = 0; i < correctAnswers.size(); i++) {
			if (correctAnswers.get(i) == 0)
				incorrectQuestions.add(String.valueOf(i + 1));
		}
		String incorrectQuestionString = incorrectQuestions.toString();
		return incorrectQuestionString;
	}

}
